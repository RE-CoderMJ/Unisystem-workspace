<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lectureMapper">
	
	<resultMap type="Lecture" id="lectureResult">
		<result column="class_no" property="classNo" />
		<result column="prof_no" property="profNo" />
		<result column="class_code" property="classCode" />
		<result column="class_kor_name" property="classKorName" />
		<result column="class_eng_name" property="classEngName" />	
		<result column="class_category" property="classCategory" />
		<result column="class_year" property="classYear" />
		<result column="class_semester" property="classSemester" />
		<result column="class_credit" property="classCredit" />	
		<result column="class_status" property="classStatus" />				
		<result column="class_location" property="classLocation" />				
		<result column="class_day" property="classDay" />
		<result column="score_att" property="scoreAtt" />
		<result column="score_task" property="scoreTask" />
		<result column="score_mid" property="scoreMid" />
		<result column="score_fin" property="scoreFin" />
		<result column="max_stud" property="maxStud" />
		<result column="curr_stud" property="currStud" />
						
		<result column="rownum" property="rownum" />	
		<result column="stud_no" property="studNo" />
		<result column="class_stud_no" property="classStudNo" />
		<result column="kor_name" property="korName" />
		<result column="attendance_no" property="attendanceNo" />
		<result column="class_title" property="classTitle" />
		<result column="attDate" property="attendanceDateA" />
		<result column="attendance_date" property="attendanceDateB" />
		
		<result column="attendance_status" property="attendanceStatus" />
		<result column="학번" property="stuGrade" />

		<result column="total_semester" property="totalSemester" />
		<result column="appdate" property="appdate" />

	</resultMap>
	
	<resultMap type="Users" id="usersResult">
		<result column="user_no" property="userNo" />
		<result column="kor_name" property="korName" />
		<result column="phone" property="phone" />		
	</resultMap>
	
	<resultMap type="Homework" id="homeworkResult">
		<result column="rownum" property="rownum" />
		<result column="homeworkp_no" property="homeworkpNo" />	
		<result column="homeworks_no" property="homeworksNo" />
		<result column="class_no" property="classNo" />	
		<result column="homeworkp_name" property="homeworkpName" />	
		<result column="homeworkp_category" property="homeworkpCategory" />	
		<result column="마감일시" property="homeworkpEndDateTime" />	
		<result column="grade_status" property="gradeStatus" />
		<result column="score" property="score" />
		<result column="homeworkp_content" property="homeworkpContent" />
		<result column="homeworks_content" property="homeworksContent" />
		<result column="제출상황" property="countHW" />	
		<result column="채점상황" property="countGHW" />	
		<result column="feedback" property="feedback" />
		<result column="stud_no" property="studNo" />
		<result column="status" property="pstatus" />	
		<result column="kor_name" property="korName" />	
		
		<result column="total_semester" property="totalSemester" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="path" property="path" />
					
	</resultMap>
	
	<resultMap type="Attachment" id="attResult">
		<result column="attach_no" property="attachNo" />
		<result column="ref_type" property="refType" />
		<result column="ref_no" property="refNo" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="path" property="path" />
		<result column="status" property="status" />	
	</resultMap>
	
	
	
	<!-- 학생 - 내가 수강중인 강의 조회 : 로그인한 학생의 수강중인 강의 리스트를 불러오는 sql -->
	<select id="selectStudentClassList" resultMap="lectureResult">
        select
		       class_stud_no
		     , class_kor_name
		     , class_category
		     , kor_name
		     , curr_stud
		     , class_code
		     , class_no
		  from class_stud
		  join class using(class_no)
		  join professor using(prof_no)
		  join users on(prof_no = user_no)
		  where stud_no = #{userNo}
            and status = 'Y'
          order
             by class_code asc
	</select>
	
	<!-- 학생 - 내가 수강중인 강의 조회 : 원하는 년도, 학기에 따라 강의를 불러오는 sql -->
	<select id="selectStudentSearchClassList" resultMap="lectureResult">
        select
		       class_stud_no
		     , class_kor_name
		     , class_category
		     , kor_name
		     , curr_stud
		     , class_code
		  from class_stud
		  join class using(class_no)
		  join professor using(prof_no)
		  join users on(prof_no = user_no)
		  where stud_no = #{userNo}
            and class_year = #{classYear}
            and class_semester = #{classSemester}
          order
             by class_code asc
	</select>
	
	<!-- 학생 - 내가 수강중인 강의 조회 : 년도 리스트를 불러오는 sql -->
	<select id="selectYearList" resultMap="lectureResult">
		select distinct
		       class_year
		  from class
		 order 
		    by class_year desc	
	</select>
	
	<!-- 학생 - 강의홈 : 내가수강중인강의에서 클릭한 강의 정보를 세션영역에 담는 sql -->
	<select id="selectLectureMainPage" resultMap="lectureResult">
		select
		       class_no
		     , prof_no
		     , class_code
		     , class_kor_name
		     , class_eng_name
		     , class_category
		     , class_year
		     , class_semester
		     , class_credit
		     , class_location
		     , class_day
		     , score_att
		     , score_task
		     , score_mid
		     , score_fin
		     , max_stud
		     , curr_stud
		     , kor_name
		  from class
		  join professor using(prof_no)
		  join users on (prof_no = user_no)
		 where class_code = #{lno}	
	</select>
	
	<select id="SelectAttStaListA" resultType="_int">
		select
		       count(attendance_status)
		  from attendance
		  join student using(stud_no)
		  join class using(class_no)
		  join users on(stud_no = user_no)
		 where user_no = #{userNo}
		   and class_code = #{classCode}
		   and attendance_status = 'A'	
	</select>
		
	<!-- 학생 - 온라인 출석부 : 로그인한 학생 정보를 가져오는 sql문 -->
	<select id="selectLoginStuInfo" resultMap="usersResult">
		select
		       user_no
		     , kor_name
		     , phone
		  from users
		 where user_no = #{userNo}	
	</select>

	<select id="SelectAttStaListB" resultType="_int">
		select
		       count(attendance_status)
		  from attendance
		  join student using(stud_no)
		  join class using(class_no)
		  join users on(stud_no = user_no)
		 where user_no = #{userNo}
		   and class_code = #{classCode}
		   and attendance_status = 'B'	
	</select>
	
	<select id="SelectAttStaListC" resultType="_int">
		select
		       count(attendance_status)
		  from attendance
		  join student using(stud_no)
		  join class using(class_no)
		  join users on(stud_no = user_no)
		 where user_no = #{userNo}
		   and class_code = #{classCode}
		   and attendance_status = 'C'	
	</select>
			
	<!--학생 - 온라인출석부  : 현재 진행된 강의 총 개수를 구하는 sql문 -->
	<select id="selectAttListCount" resultType="_int">
		select 
		       count(*)
		  from attendance
		  join student using(stud_no)
		  join users on (stud_no = user_no)
		  join class using(class_no)
		 where user_no  = #{userNo}
		   and class_code = #{classCode} 
	</select>
	
	<!--교수 - 출결관리 : 현재 진행된 강의 총 개수를 구하는 sql문 -->
	<select id="selectProAttListCount" resultType="_int">
		select 
               count(
               distinct
               attendance_date)
		  from attendance
		  join class using(class_no)
          join professor using(prof_no)
          join users on (prof_no = user_no)
		 where user_no  = #{userNo}
		   and class_code = #{classCode}
	</select>

	<!-- 학생 - 온라인출석부  : 선택한 강의의 현재까지 진행한 강의리스트 조회 -->
	<select id="selectAttList" resultMap="lectureResult">
        select
               rownum
             , class_code
             , attendance_no
             , class_title
             , to_char(to_date(attendance_date, 'YYYY-MM-DD'), 'YYYY.MM.DD') "attDate"
             , attendance_status
          from (
                select 
                       *
                  from attendance
                  join class using(class_no)
                  join student using(stud_no)
                  join users on (stud_no = user_no)
                 where class_code = #{classCode}
                   and user_no = #{userNo}
                 order
                    by attendance_date desc             
                ) 
	</select>
	
	<!-- 교수 - 마이페이지 : 진행강의 조회 페이지 리스트를 조회해오는 sql문  -->
	<select id="selectProfessorClassList" resultMap="lectureResult">
		select
		       distinct
		       class_no 
		     , class_code
		     , class_kor_name
		     , class_category
		     , kor_name
		     , curr_stud
		  from class 
		  join professor using(prof_no)
		  join users on (prof_no = user_no)
		  join class_stud using(class_no)
		 where user_no = #{userNo}
		   and status = 'Y'
	</select>
	
	<!-- 교수 - 진행강의조회 : 원하는 년도, 학기에 따라 강의를 불러오는 sql -->
	<select id="SelectProfessorSearchClassList" resultMap="lectureResult">
        select
               distinct
               class_code
		     , class_no
		     , class_kor_name
		     , class_category
		     , kor_name
		     , curr_stud
		  from class
		  join professor using(prof_no)
		  join users on(prof_no = user_no)
          join class_stud using(class_no)
		  where prof_no = #{userNo}
            and class_year = #{classYear}
            and class_semester = #{classSemester}
          order
             by class_code asc	
	</select>
	
	<!-- 교수 - 강의페이지 - 출결관리 : 진행한 강의 리스트 조회 -->
	<select id="selectProAttList" resultMap="lectureResult">
		select 
		       rownum
		     , a.*
		 from (
		        select 
		               distinct
		               class_no
		             , class_code
		             , class_title
		             , to_char(to_date(attendance_date, 'YYYY-MM-DD'), 'YYYY.MM.DD') "attDate"
		             , attendance_date
		          from attendance
		          join class using(class_no)
		          join student using(stud_no)
		          join users on (stud_no = user_no)
		         where class_code = #{classCode}
		         order
		            by "attDate" desc           
		         ) a
	</select>
	
	<!-- 교수 - 강의페이지 - 출결관리 - 출결관리 상세 -->
	<select id="selectAttDetail" resultMap="lectureResult">
		select
               rownum
             , a.*
          from 
              (
               select
                      class_code
                    , class_no
                    , class_title 
                    , substr(stud_no,3,2) "학번"
                    , attendance_date
                    , stud_no
                    , kor_name
                    , total_semester
                    , attendance_status
                from attendance  
                join student using(stud_no)
                join users on (stud_no = user_no)
                join class using(class_no)
               where class_code = #{classCode}
                 and attendance_date = #{attendanceDateB}
                order
                   by stud_no desc	
              ) a
	</select>
	
	<!-- 교수 - 출결관리 - 해당 강의를 듣는 학생 목록 조회 -->
	<select id="AjaxSelectselectAttStuList" resultMap="lectureResult">
		 select 
		         class_no
		       , class_code
		       , stud_no
		       , kor_name
		    from class_stud
		    join student using(stud_no)
		    join users on (stud_no = user_no)
		    join class using(class_no)
		   where class_code = #{classCode}
		   order
		      by stud_no desc	
	</select>
	
	<!-- 교수 - 출결관리 - 새로운 강의 등록 -->
	<insert id="insertAtt">
		insert
		  into attendance
		  (
		    attendance_no
		  , class_no
		  , stud_no
		  , attendance_date
		  , attendance_status
		  , class_title
		  )
		  values
		  (
		    seq_attendance.nextval
		  , #{classNo}
		  , #{studNo}
		  , #{attendanceDateA}
		  , null
		  , #{classTitle}
		  )	
	</insert>
	
	<!-- 교수 - 출결관리 - 학생들의 출결상태를 insert -->
	<update id="insertAttStatus">
		update
		       attendance
		   set attendance_status = #{attendanceStatus}
		 where attendance_date = #{attendanceDateB}
		   and class_no = #{classNo}
		   and stud_no = #{studNo}
	</update>
	
	<!-- 과제 ================================================================= -->
	
	<!-- 과제업로드 : 마감상태의 총 게시글 수를 불러오는 sql -->
	<select id="selectHomeworkListCount" resultType="_int">
		select
		       count(*)
		  from homeworkp
		 where status = 'Y'
		   and homeworkp_category = 'I'	
           and class_no = #{classNo}
	</select>
	

	<!-- 학생 - 과제업로드 : 마감상태의 총 게시글 리스트를 불러오는 SQL -->
	<select id="selectHomeworkpList" resultMap="homeworkResult">
		select 
		       homeworkp_no
		     , homeworkp_name
		     , to_char(to_date(homeworkp_enddatetime, 'YYYY.MM.DD HH24:MI'), 'YYYY.MM.DD HH24:MI') "마감일시"
		     , kor_name
		     , ( select 
		               grade_status 
		          from homeworks s
		         where stud_no = #{studNo}
		           and status = 'Y'
		           and s.homeworkp_no = p.homeworkp_no ) "grade_status"
		     , ( select 
		                score 
		          from homeworks s
		         where stud_no = #{studNo}
		           and status = 'Y'
		           and s.homeworkp_no = p.homeworkp_no ) "score"
		  from homeworkp p
		  join class c using(class_no)
		  join users on (c.prof_no = user_no)
		 where class_no = #{classNo}
		   and p.status = 'Y'
		   and homeworkp_category = 'I'
		 order
		    by homeworkp_no desc
	</select>
	
	<!-- 학생 - 과제업로드 : 제출가능상태의 총 게시글 리스트를 불러오는 SQL -->
	<select id="selectPhomeworkList" resultMap="homeworkResult">
		select 
		       homeworkp_no
		     , homeworkp_name
		     , to_char(to_date(homeworkp_enddatetime, 'YYYY.MM.DD HH24:MI'), 'YYYY.MM.DD HH24:MI') "마감일시"
		     , kor_name
		     , ( select 
		               grade_status 
		          from homeworks s
		         where stud_no = #{studNo}
		           and status = 'Y'
		           and s.homeworkp_no = p.homeworkp_no ) "grade_status"
		  from homeworkp p
		  join class c using(class_no)
		  join users on (c.prof_no = user_no)
		 where class_no = #{classNo}
		   and p.status = 'Y'
		   and homeworkp_category = 'P'
		 order
		    by homeworkp_no desc	
	</select>	
	
	<!-- 교수 - 과제관리 : 마감상태의 총 게시글 리스트를 불러오는 SQL -->
	<select id="selectProHomeworkEndList" resultMap="homeworkResult">
		select 
		       homeworkp_no
		     , homeworkp_name
		     , to_char(to_date(homeworkp_enddatetime, 'YYYY.MM.DD HH24:MI'), 'YYYY.MM.DD HH24:MI') "마감일시"
		     , kor_name
		     , ( select
                         count(stud_no)
                    from homeworks s
                   where homeworkp_category = 'I'
                     and s.status = 'Y'
                     and p.status = 'Y'
                     and s.homeworkp_no = p.homeworkp_no ) "제출상황"
		     , ( select
                         count(grade_status)
                    from homeworks s
                   where homeworkp_category = 'I'
                     and s.status = 'Y'
                     and p.status = 'Y'
                     and s.homeworkp_no = p.homeworkp_no
                     and grade_status = 'A') "채점상황"
		  from homeworkp p
		  join class c using(class_no)
		  join users on (c.prof_no = user_no)
		 where class_no = #{classNo}
		   and p.status = 'Y'
		   and homeworkp_category = 'I'
		 order
		    by homeworkp_no desc
	</select>

	<!-- 교수 : 과제관리 - 제출가능상태의 총 게시글 리스트를 불러오는 SQL -->
	<select id="selectProhomeworkList" resultMap="homeworkResult">
		select 
		       homeworkp_no
		     , homeworkp_name
             , kor_name
		     , to_char(to_date(homeworkp_enddatetime, 'YYYY.MM.DD HH24:MI'), 'YYYY.MM.DD HH24:MI') "마감일시"
		     , ( select
                         count(stud_no)
                    from homeworks s
                   where homeworkp_category = 'P'
                     and s.status = 'Y'
                     and p.status = 'Y'
                     and s.homeworkp_no = p.homeworkp_no ) "제출상황"
		  from homeworkp p
		  join class c using(class_no)
		  join users on (c.prof_no = user_no)
		 where class_no = #{classNo}
		   and p.status = 'Y'
		   and homeworkp_category = 'P'
		 order
		    by homeworkp_no desc	
	</select>
	
	<!-- 교수 - 과제관리 : 과제등록에서  homeworkp 테이블에 등록하는 sql-->
	<insert id="insertHomeworkEnrollForm">
		insert
		  into homeworkp
		  (
		    homeworkp_no
		  , class_no
		  , homeworkp_name
		  , homeworkp_category
		  , homeworkp_enddatetime
		  , status
		  , homeworkp_content
		  )
		  values
		  (
		    seq_homeworkp.nextval
		  , #{classNo}
		  , #{homeworkpName}
		  , 'P'
		  , to_char(to_date( #{ homeworkpEndDateTime }, 'YYYY-MM-DD HH24:MI'), 'YYYYMMDDHH24MI') 
		  , 'Y'
		  , #{homeworkpContent}
		  )	
	</insert>
	
	<insert id="insertAttachPHomework">
		insert
		  into attachment
		  (
            attach_no
          , ref_type
          , ref_no
          , origin_name
          , change_name
          , path
		  )
		  values
		  (
		    seq_attno.nextval
		  , 'P'
		  , seq_homeworkp.currval
		  , #{originName}
		  , #{changeName}
		  , #{path}
		  )	
	</insert>

	<!-- 교수 : 과제관리 - 상세페이지 조회(제출가능한 과제 상세페이지) -->
	<select id="selectProHomework" resultMap="homeworkResult">
		select
		       homeworkp_no
		     , homeworkp_name
		     , to_char(to_date(homeworkp_enddatetime, 'YYYY.MM.DD HH24:MI'), 'YYYY.MM.DD HH24:MI') "마감일시"
		     , homeworkp_content
		  from homeworkp
		 where homeworkp_no = #{homeworkpNo}
		   and class_no = #{classNo}
		   and status = 'Y'
		   and homeworkp_category = 'P'
	</select>
	
	<!-- 교수 : 과제관리 - 상세페이지 조회(마감된 과제 상세페이지) -->
	<select id="selectProHomeworkI" resultMap="homeworkResult">
		select
		       homeworkp_no
		     , homeworkp_name
		     , to_char(to_date(homeworkp_enddatetime, 'YYYY.MM.DD HH24:MI'), 'YYYY.MM.DD HH24:MI') "마감일시"
		     , homeworkp_content
		  from homeworkp
		 where homeworkp_no = #{homeworkpNo}
		   and class_no = #{classNo}
		   and status = 'Y'
		   and homeworkp_category = 'I'
	</select>
	
	<!--  교수 - 과제관리 : 상세페이지 조회 (상단의 교수가 낸 과제 상세페이지에 필요한 첨부파일) -->
	<select id="selectAttachHomework" resultMap="attResult">
		select
               attach_no
             , ref_type
             , ref_no
             , origin_name
             , change_name
             , path
             , status
          from attachment
		 where ref_type = 'P'
		   and ref_no = #{homeworkpNo}	
	</select>
	
	<!-- 교수 - 과제관리 : '과제마감'버튼 클릭을 통해 제출가능한과제 상태를 마감상태로 변경 -->
	<update id="updatepHomeworkStatus">
		update 
		       homeworkp
		   set homeworkp_category = 'I'
		 where class_no = #{classNo}
		   and homeworkp_no = #{homeworkpNo}	
	</update>

	<!-- 교수 - 과제관리 : 과제상세페이지에서 '수정'버튼을 통해 과제수정 -->
	<update id="updateProHomework">
		update
		       homeworkp
		   set homeworkp_name = #{homeworkpName}
		     , homeworkp_enddatetime = to_char(to_date( #{ homeworkpEndDateTime }, 'YYYY-MM-DD HH24:MI'), 'YYYYMMDDHH24MI')
		     , homeworkp_content = #{homeworkpContent}
		 where class_no = #{classNo}
		   and homeworkp_no = #{homeworkpNo}
		   and status = 'Y'	
	</update>
	
	<!-- 교수 - 과제관리 : 과제상세페이지에서 '수정'버튼을 통해 첨부파일수정 -->
	<update id="updateProHwAtt">
		update 
			   attachment
		   set origin_name = #{originName}
			 , change_name = #{changeName}
			 , path = #{path}
         where ref_no = #{refNo}	
	</update>

	<!-- 교수 - 과제관리 : '수정'버튼을 통해 기존의 교수가 낸 과제의 첨부파일을 수정(기존에 파일 x) -->
	<insert id="insertNewAtt">
		insert
		  into attachment
		  (
            attach_no
          , ref_type
          , ref_no
          , origin_name
          , change_name
          , path
		  )
		  values
		  (
		    seq_attno.nextval
		  , 'P'
		  , #{refNo}
		  , #{originName}
		  , #{changeName}
		  , #{path}
		  )		
	
	</insert>

	<!-- 교수 - 과제관리 : 상세페이지의 '삭제'버튼을 통해 게시글 삭제 -->
	<update id="deleteProHomework">
		update
		       homeworkp
		   set status = 'N'
		 where homeworkp_no = #{homeworkpNo}
           and class_No = #{classNo}	
	</update>

	<!-- 교수 - 과제관리 : 상세페이지의 '삭제'버튼을 통해 게시글에 딸린 첨부파일 삭제 -->
	<update id="deleteAttachProHomework">
		update
		       attachment
		   set status = 'N'
		 where ref_no = #{homeworkpNo}
           and ref_type = 'P'	
	</update>
	
	<!-- 학생 - 과제업로드 : 제출가능한 과제 상세조회 -->
	<select id="selectStuHomeworkP" resultMap="homeworkResult">
		select
		       homeworkp_no
		     , homeworkp_name
		     , to_char(to_date(homeworkp_enddatetime, 'YYYY.MM.DD HH24:MI'), 'YYYY.MM.DD HH24:MI') "마감일시"
		     , homeworkp_content
             , kor_name
		  from homeworkp
          join class using(class_no)
          join professor using(prof_no)
          join users on (prof_no = user_no)
		 where homeworkp_no = #{homeworkpNo}
		   and class_no = #{classNo}
		   and status = 'Y'
		   and homeworkp_category = 'P'	
	</select>

	<!-- 학생 - 과제업로드 : 제출가능한 과제등록 -->
	<insert id="insertStuHomeworkEnrollForm">
		insert
		  into homeworks
		  (
		    homeworks_no
		  , homeworkp_no
		  , stud_no
		  , grade_status
		  , status
		  , homeworks_content
		  )
		  values
		  (
		    seq_homeworks.nextval
		  , #{homeworkpNo}
		  , #{studNo}
		  , 'B'
		  , 'Y'
		  , #{homeworksContent}
		  )	
	</insert>

	<!-- 학생 - 과제업로드 : 제출가능한 과제등록 시 등록된 첨부파일 -->
	<insert id="insertStuAttachPHomework">
		insert
		  into attachment
		  (
            attach_no
          , ref_type
          , ref_no
          , origin_name
          , change_name
          , path
		  )
		  values
		  (
		    seq_attno.nextval
		  , 'S'
		  , seq_homeworks.currval
		  , #{originName}
		  , #{changeName}
		  , #{path}
		  )		
	</insert>
	
	<!-- 학생 - 과제업로드 : 제출가능한 과제 제출 후 해당 부분 조회 -->
	<select id="selectStuHomeworkDetail" resultMap="homeworkResult">
		select
		       homeworks_no
		     , homeworkp_no
		     , stud_no
		     , grade_status
		     , score
		     , feedback
		     , homeworks_content
		  from homeworks
		 where homeworkp_no = #{homeworkpNo}
		   and status = 'Y'	
	</select>
	
	<!-- 학생 - 과제업로드 : 제출가능한 과제 제출 후 해당 부분 첨부파일 조회  -->
	<select id="selectStuAttachHomework" resultMap="attResult">
		select
               attach_no
             , ref_type
             , ref_no
             , origin_name
             , change_name
             , path
             , status
          from attachment
		 where ref_type = 'S'
		   and ref_no = #{homeworksNo}
		   and status = 'Y'		
	</select>

	<!-- 학생 - 과제업로드 : 제출가능한 과제 새로운 첨부파일 업로드 -->
	<update id="updateStuHomework">
		update
		       homeworks
		   set homeworks_content = #{homeworksContent}
		 where homeworks_no = #{homeworksNo}
		   and status = 'Y'	
	</update>
	
	<!-- 학생 - 과제업로드 : 과제수정 (기존에 과제가 없을 때 ) --> 
	<insert id="insertnewStuAttachPHomework">
		insert
		  into attachment
		  (
            attach_no
          , ref_type
          , ref_no
          , origin_name
          , change_name
          , path
		  )
		  values
		  (
		    seq_attno.nextval
		  , 'S'
		  , #{refNo}
		  , #{originName}
		  , #{changeName}
		  , #{path}
		  )		
	</insert>
	
	<!-- 학생 - 과제업로드 : 학생이 제출한 과제 게시글 삭제 -->
	<update id="deleteStuHomework">
		update
		       homeworks
		   set status = 'N'
		 where homeworks_no = #{homeworksNo}	
	</update>

	<!-- 학생  - 과제업로드 : 학새이 제출한 첨부파일 삭제 -->
	<update id="deleteAttachStuHomework">
		update
		       attachment
		   set status = 'N'
		 where ref_no = #{homeworksNo}
           and ref_type = 'S'		
	</update>
	
	<!-- 교수 - 과제관리 : 한 과제에 대해 제출한 학생 정보 리스트 조회 -->
	<select id="selectStuHomeworkList" resultMap="homeworkResult">
		select
               homeworkp_no
		     , homeworks_no
             , total_semester
             , grade_status
             , stud_no
             , kor_name
             , homeworks_content
             , ( select
                        origin_name
                   from attachment
                  where ref_type = 'S'
                    and ref_no = homeworks_no) "originName"
             , ( select
                        change_name
                   from attachment
                  where ref_type = 'S'
                    and ref_no = homeworks_no ) "changeName"
             , ( select
                        path
                   from attachment
                  where ref_type = 'S'
                    and ref_no = homeworks_no ) "path"
		  from homeworks s
          join homeworkp p using (homeworkp_no)
          join student using (stud_no)
          join users on(stud_no = user_no)
		 where s.status = 'Y'
           and homeworkp_no = #{homeworkpNo}
         order
            by homeworks_no desc	
	</select>
	
	<!-- 교수 : 과제관리 - 현재 게시글 리스트 갯수 조회 -->
	<select id="selectStuHomeworkListCount" resultType="_int">
		select
			       count(*)
			  from homeworks
			 where status = 'Y'
			   and homeworkp_no = #{homeworkpNo}	
	</select>





	<!-- AUTHOR DAHYUN -->
	<insert id="classInsert">
		INSERT
		INTO CLASS
		     (
		       CLASS_NO
		     , PROF_NO
		     , CLASS_CODE
		     , CLASS_KOR_NAME
		     , CLASS_ENG_NAME
		     , CLASS_CATEGORY
		     , CLASS_YEAR
		     , CLASS_SEMESTER
		     , CLASS_CREDIT
		     , CLASS_LOCATION
		     , CLASS_DAY
		     , CLASS_TIME
		     , CLASS_START
		     , CLASS_DIVISION
		     , CLASS_KOR_OUTLINE
		     , CLASS_ENG_OUTLINE
		     , CLASS_GOAL
		     , CLASS_STATUS
		     , CLASS_PHONE
		     , PROF_LOCATION
		     , CLASS_PLAN
		     , SCORE_ATT
		     , SCORE_TASK
		     , SCORE_MID
		     , SCORE_FIN
		     , MAX_STUD
		     , APPDATE
		     )
		      VALUES
		    (
		       SEQ_CLASS.NEXTVAL
		     , #{profNo}
		     , SEQ_CLASSCODE.NEXTVAL
		     , #{classKorName}
		     , #{classEngName}
		     , #{classCategory}
		     , #{classYear}
		     , #{classSemester}
		     , #{classCredit}
		     , #{classLocation}
		     , #{classDay}
		     , #{classTime}
		     , #{classStart}
		     , #{classDivision}
		     , #{classKorOutline}
		     , #{classEngOutline}
		     , #{classGoal}
		     , #{classStatus}
		     , #{classPhone}
		     , #{profLocation}
		     , #{classPlan}
		     , #{scoreAtt}
		     , #{scoreTask}
		     , #{scoreMid}
		     , #{scoreFin}
		     , #{maxStud}
		     , TO_CHAR(SYSDATE, 'YYYY-MM-DD')
		    )
	</insert>
	
	<select id="selectAppCount" resultType="_int">
		SELECT 
			   COUNT(*)
			   FROM CLASS
		 WHERE PROF_NO = #{profNo}
		 ORDER
		    BY CLASS_YEAR ASC
	</select>
	
	<select id="classAppList" resultMap="lectureResult">
		SELECT 
		       ROWNUM
		     , A.*
		 FROM (SELECT 
		       CLASS_NO
		     , APPDATE
		     , CLASS_KOR_NAME
		     , DECODE(CLASS_STATUS, NULL, '대기', 'Y', '승인', 'N', '반려') "CLASS_STATUS"
		  FROM CLASS
		 WHERE PROF_NO = #{profNo}
		 ORDER
		    BY CLASS_NO ASC NULLS FIRST) A 
		ORDER BY ROWNUM DESC
	</select>
	
</mapper>
